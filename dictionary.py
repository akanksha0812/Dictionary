# -*- coding: utf-8 -*-
"""Dictionary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YcYhxKRgVg7THVeiVZEaP1-2KqiO8-ra
"""

import os


class TrieNode:  #TC - O(1), SC - O(26) = O(1)
    def __init__(self):
        self.children = [None] * 26  # For each letter 'a' to 'z'
        self.isWordCompleted = False


class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    # Adding words to Trie
    def addWord(self, word: str) -> None:  # TC-O(L), L is the length of the word, SC - O(W * L), W- words
        newRoot = self.root
        for ch in word:
            alphabetIndex = ord(ch) - ord('a')
            if newRoot.children[alphabetIndex] is None:
                newRoot.children[alphabetIndex] = TrieNode()
            newRoot = newRoot.children[alphabetIndex]
        newRoot.isWordCompleted = True

    # search functionality using recursion
    def searchHelper(self, word: str, index: int, newRoot: TrieNode) -> bool:
        if index == len(word):
            return newRoot.isWordCompleted
        ch = word[index]
        if ch == '.':
            for i in range(26):  # TC - O(26) => O(1)
                if newRoot.children[i] is not None and self.searchHelper(word, index + 1, newRoot.children[i]):
                    return True
            return False
        else:
            alphabetIndex = ord(ch) - ord('a')
            if newRoot.children[alphabetIndex] is None:
                return False
            return self.searchHelper(word, index + 1, newRoot.children[alphabetIndex])

    # public search function
    def search(self, word: str) -> bool:
        return self.searchHelper(word, 0, self.root)

    # function to find suggestions based on prefix
    def suggestionsHelper(self, node, prefix):
        suggestions = []
        if node.isWordCompleted:
            suggestions.append(prefix)

        for i in range(26):      # TC - O(26) => O(1)
            if node.children[i]:
                child_char = chr(i + ord('a'))
                suggestions.extend(self.suggestionsHelper(node.children[i], prefix + child_char))

        return suggestions

    def getSuggestions(self, prefix):
        node = self.root
        for ch in prefix:  # TC - O(P), P is the length of the prefix
            alphabetIndex = ord(ch) - ord('a')
            if not node.children[alphabetIndex]:
                return []  # No suggestions if prefix doesn't exist
            node = node.children[alphabetIndex]

        return self.suggestionsHelper(node, prefix)

    # Function to compute Levenshtein distance for spell checking
    def levenshteinDistance(self, s1, s2):  # where s1 and s2 are the two strings for which the Levenshtein distance is being calculated
        if len(s1) < len(s2):
            s1, s2 = s2, s1

        distances = range(len(s2) + 1)  # TC - O(M), M is len(s2)
        for i, c1 in enumerate(s1):   # TC - O(N), N is len(s1)
            new_distances = [i + 1]
            for j, c2 in enumerate(s2):  # TC - O(M)
                if c1 == c2:
                    new_distances.append(distances[j])  # TC - O(1)
                else:
                    new_distances.append(1 + min(distances[j], distances[j + 1], new_distances[-1]))
            distances = new_distances
        return distances[-1]

    # function to get possible spelling corrections
    def getSpellingSuggestions(self, word, max_distance=2):
        all_words = self.suggestionsHelper(self.root, "")  # TC - O(W),W is the number of words in the Trie
        suggestions = [w for w in all_words if self.levenshteinDistance(word, w) <= max_distance]   # TC - O(W * N * M)
        return suggestions


# function to read words from list.txt
def loadWordsFromFile(dictionary, filename="list.txt"):
    if not os.path.exists(filename):
        raise FileNotFoundError(f"{filename} not found!")

    with open(filename, 'r') as file:
        words = file.readlines()  # TC - O(T),T is the total number of characters in the file

    for word in words:
        clean_word = word.strip().lower()  # Strip whitespace and convert to lowercase , TC-O(L),L is the length of the word
        if clean_word.isalpha():  # Ensure it is a valid word
            dictionary.addWord(clean_word)   # TC - O(L)


# Example
if __name__ == "__main__":
    # Creating dictionary object
    dictionary = WordDictionary()

    # Loading words from list.txt into Trie
    loadWordsFromFile(dictionary)

    # search eg
    print("Search 'abacus':", dictionary.search("abacus"))
    print("Search 'abz':", dictionary.search("abz"))
    print("Search '':", dictionary.search(""))

    # suggestion eg
    print("Suggestions for 'abz':", dictionary.getSuggestions("abz"))  # Autocomplete for 'aba'

    # spell checking suggestion eg
    print("Spelling suggestions for 'abcas':", dictionary.getSpellingSuggestions("abcas"))